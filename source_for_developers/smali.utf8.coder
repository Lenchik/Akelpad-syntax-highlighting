;----------------------------------------------;
;           Coder plugin syntax file           ;
;----------------------------------------------;

;Colors
; Color need to be in #RRGGBB or #RGB format.
; If color equal to zero, then color ignored.
;
;Font styles
; 0  ignored.
; 1  normal.
; 2  bold.
; 3  italic.
; 4  bold italic.
;
;For comfort file viewing/editing set tab size to 8.

;Author: Skif_off (2017-12-22)
;AkelPad 4.9.6 and higher
;https://github.com/Lenchik/Akelpad-syntax-highlighting/blob/master/smali.coder - working version
;https://github.com/Lenchik/Akelpad-syntax-highlighting/blob/master/source_for_developers/smali.utf8.coder - development version in UTF-8 for easier development on GitHub
;smali (assembler for the dex format used by dalvik, Android's Java VM implementation)
;Adapted to AkelPad from Notepad++ (list of words was used from "smali_npp.xml")
;  - add additional folding rules;
;  - add new words from https://github.com/JesusFreke/smali/blob/master/smali/src/test/resources/LexerTest/
;
; Type: B|C|D|F|I|J|S|V|Z ???

Files:
;==========
;File types
;==========
*.smali


;----------------------------------------------;
;                  HighLight                   ;
;----------------------------------------------;

;Flags (sum of the members)
;     1  case sensitive.
;     2  word is a composition of characters ("Words:" section only). Example: "0123456789" - highlight words that contain only digits.
;     4  quote end required ("Quotes:" section only).
;     8  quote start string is ignored and last meet delimiter used as quote start ("Quotes:" section only).
;    16  quote end string is ignored and first meet delimiter used as quote end ("Quotes:" section only).
;    32  don't highlight quote start ("Quotes:" section only).
;    64  don't highlight quote end ("Quotes:" section only).
;   128  don't catch and don't highlight quote start ("Quotes:" section only).
;   256  don't catch and don't highlight quote end ("Quotes:" section only).
;   512  quote start, delimiter or word located at line start.
;  1024  quote end, delimiter or word located at line end.
;  2048  quote start is surrounded with delimiters ("Quotes:" section only).
;  4096  quote end is surrounded with delimiters ("Quotes:" section only).
;  8192  quote doesn't contain delimiters ("Quotes:" section only).
; 16384  only quote start string is catched ("Quotes:" section only).
; 32768  quote doesn't contain any character ("Quotes:" section only).


Font:
;=================================================================
;FontStyle             FontSize              FaceName
;=================================================================
${HighLight_FontStyle} ${HighLight_FontSize} ${HighLight_FaceName}


Colors:
;=============================================================================================================================================================================================================================================================================================================================================================================================================================
;BasicTextColor             BasicBkColor              SelTextColor              SelBkColor              LineTextColor              LineBkColor              LineBorderColor              AltTextColor              AltBkColor              AltBorderColor              ColumnColor              MarkerColor              CaretColor              UrlColor              ActiveUrlColor              VisitUrlColor
;=============================================================================================================================================================================================================================================================================================================================================================================================================================
${HighLight_BasicTextColor} ${HighLight_BasicBkColor} ${HighLight_SelTextColor} ${HighLight_SelBkColor} ${HighLight_LineTextColor} ${HighLight_LineBkColor} ${HighLight_LineBorderColor} ${HighLight_AltTextColor} ${HighLight_AltBkColor} ${HighLight_AltBorderColor} ${HighLight_ColumnColor} ${HighLight_MarkerColor} ${HighLight_CaretColor} ${HighLight_UrlColor} ${HighLight_ActiveUrlColor} ${HighLight_VisitUrlColor}


BkImage:
;==================================================
;BkImageFile              BkImageAlpha
;==================================================
${HighLight_BkImageFile}  ${HighLight_BkImageAlpha}


AutoMark:
;====================================================================================================================
;AutoMarkFlags             AutoMarkFontStyle              AutoMarkTextColor              AutoMarkBkColor
;====================================================================================================================
${HighLight_AutoMarkFlags} ${HighLight_AutoMarkFontStyle} ${HighLight_AutoMarkTextColor} ${HighLight_AutoMarkBkColor}


Quotes:
;===================================================================================
;Flags  Font    Color   Color   Quote   Quote   Escape  Quote   Quote   Parent  Rule
;       style   text    bkgrnd  start   end     char    include exclude ID      ID
;===================================================================================
;513=1+512
;513	3	${COMM}	0	"#"	""	""	""	""	0	0
;5=1+4
5	3	${STR}	0	`"`	`"`	"\"	""	""	0	0
5	3	${STR}	0	"'"	"'"	"\"	""	""	0	0
;32773=1+4+32768
32773	0	${OP}	0	"<init"	">"	""	""	""	0	0
;389=1+4+128+256
389	2	${STR}	0	"L"	";"	""	""	":"	0	0
;273=1+16+256
273	0	${VAR}	0	":"	""	""	"_1234567890abcdefghijklmnopqrstuvwxyz"	""	""	0	0


QuotesRE:
;===========================================================================================
;Flags  Pattern         \BackRef=(FontStyle,ColorText,ColorBk) \BackRef=...  ParentID RuleID
;===========================================================================================
;--Comment #--
1	"^#.*?|(?<=[ \t])#.*?|(?<=\[)#.*?"	"\0=(3,${COMM},0)"	0	0
;Registers
1	"(v|p)\d{1,5}+"		"\0=(2,0,0)"	0	0
;.end *
1	"\.end method"	"\0=(2,${IF},0)"	0	0
1	"\.end (subannotation|annotation|array\-data|field|packed\-switch|parameter|param|sparse\-switch)"	"\0=(0,${IF},0)"	0	0
;local
1	"\.(end|restart) local"	"\0=(0,${IF},0)"	0	0


Delimiters:
;===============================================
;Flags  Font    Color   Color   Char(s)   Parent
;       style   text    bkgrnd            ID
;===============================================
1	0	0	0	" "
1	0	0	0	"	"
1	0	${DEL1}	0	->
1	0	${DEL1}	0	..
1	0	${DEL1}	0	,
1	0	${DEL1}	0	:
1	0	${DEL1}	0	;
1	0	${DEL1}	0	=
1	0	${DEL1}	0	(
1	0	${DEL1}	0	)
1	0	${DEL1}	0	{
1	0	${DEL1}	0	}
1	0	0	0	<
1	0	${DEL1}	0	>


Words:
;===========================================
;Flags  Font    Color   Color   Word  Parent
;       style   text    bkgrnd        ID
;===========================================
;1+2
3	0	${NUM}	0	"0123456789"
;
1	2	${IF}	0	.method
;
1	0	${IF}	0	.annotation
1	0	${IF}	0	.array-data
1	0	${IF}	0	.catch
1	0	${IF}	0	.catchall
1	0	${IF}	0	.class
1	0	${IF}	0	.end
;1	0	${IF}	0	.end local
1	0	${IF}	0	.enum
1	0	${IF}	0	.epilogue
1	0	${IF}	0	.field
1	0	${IF}	0	.implements
1	0	${IF}	0	.line
1	0	${IF}	0	.local
1	0	${IF}	0	.locals
1	0	${IF}	0	.packed-switch
1	0	${IF}	0	.param
1	0	${IF}	0	.parameter
1	0	${IF}	0	.prologue
1	0	${IF}	0	.registers
1	0	${IF}	0	.restart
;1	0	${IF}	0	.restart local
1	0	${IF}	0	.source
1	0	${IF}	0	.sparse-switch
1	0	${IF}	0	.subannotation
1	0	${IF}	0	.super
;
1	3	${TYPE}	0	abstract
1	3	${TYPE}	0	annotation
1	3	${TYPE}	0	bridge
1	3	${TYPE}	0	constructor
1	3	${TYPE}	0	declared-synchronized
1	3	${TYPE}	0	enum
1	3	${TYPE}	0	final
1	3	${TYPE}	0	interface
1	3	${TYPE}	0	native
1	3	${TYPE}	0	private
1	3	${TYPE}	0	protected
1	3	${TYPE}	0	public
1	3	${TYPE}	0	static
1	3	${TYPE}	0	strictfp
1	3	${TYPE}	0	synchronized
1	3	${TYPE}	0	synthetic
1	3	${TYPE}	0	system
1	3	${TYPE}	0	transient
1	3	${TYPE}	0	varargs
1	3	${TYPE}	0	volatile
;
1	0	${OP}	0	add-double
1	0	${OP}	0	add-double/2addr
1	0	${OP}	0	add-float
1	0	${OP}	0	add-float/2addr
1	0	${OP}	0	add-int
1	0	${OP}	0	add-int/2addr
1	0	${OP}	0	add-int/lit16
1	0	${OP}	0	add-int/lit8
1	0	${OP}	0	add-long
1	0	${OP}	0	add-long/2addr
1	0	${OP}	0	aget
1	0	${OP}	0	aget-boolean
1	0	${OP}	0	aget-byte
1	0	${OP}	0	aget-char
1	0	${OP}	0	aget-object
1	0	${OP}	0	aget-short
1	0	${OP}	0	aget-wide
1	0	${OP}	0	and-int
1	0	${OP}	0	and-int/2addr
1	0	${OP}	0	and-int/lit16
1	0	${OP}	0	and-int/lit8
1	0	${OP}	0	and-long
1	0	${OP}	0	and-long/2addr
1	0	${OP}	0	aput
1	0	${OP}	0	aput-boolean
1	0	${OP}	0	aput-byte
1	0	${OP}	0	aput-char
1	0	${OP}	0	aput-object
1	0	${OP}	0	aput-short
1	0	${OP}	0	aput-wide
1	0	${OP}	0	array-length
1	0	${OP}	0	check-cast
1	0	${OP}	0	cmp-long
1	0	${OP}	0	cmpg-double
1	0	${OP}	0	cmpg-float
1	0	${OP}	0	cmpl-double
1	0	${OP}	0	cmpl-float
1	0	${OP}	0	const
1	0	${OP}	0	const-class
1	0	${OP}	0	const-string
1	0	${OP}	0	const-string-jumbo
1	0	${OP}	0	const-string/jumbo
1	0	${OP}	0	const-wide
1	0	${OP}	0	const-wide/16
1	0	${OP}	0	const-wide/32
1	0	${OP}	0	const-wide/high16
1	0	${OP}	0	const/16
1	0	${OP}	0	const/4
1	0	${OP}	0	const/high16
1	0	${OP}	0	div-double
1	0	${OP}	0	div-double/2addr
1	0	${OP}	0	div-float
1	0	${OP}	0	div-float/2addr
1	0	${OP}	0	div-int
1	0	${OP}	0	div-int/2addr
1	0	${OP}	0	div-int/lit16
1	0	${OP}	0	div-int/lit8
1	0	${OP}	0	div-long
1	0	${OP}	0	div-long/2addr
1	0	${OP}	0	double-to-float
1	0	${OP}	0	double-to-int
1	0	${OP}	0	double-to-long
1	0	${OP}	0	execute-inline
1	0	${OP}	0	execute-inline/range
1	0	${OP}	0	fill-array-data
1	0	${OP}	0	filled-new-array
1	0	${OP}	0	filled-new-array/range
1	0	${OP}	0	float-to-double
1	0	${OP}	0	float-to-int
1	0	${OP}	0	float-to-long
1	0	${OP}	0	goto
1	0	${OP}	0	goto/16
1	0	${OP}	0	goto/32
1	0	${OP}	0	if-eq
1	0	${OP}	0	if-eqz
1	0	${OP}	0	if-ge
1	0	${OP}	0	if-gez
1	0	${OP}	0	if-gt
1	0	${OP}	0	if-gtz
1	0	${OP}	0	if-le
1	0	${OP}	0	if-lez
1	0	${OP}	0	if-lt
1	0	${OP}	0	if-ltz
1	0	${OP}	0	if-ne
1	0	${OP}	0	if-nez
1	0	${OP}	0	iget
1	0	${OP}	0	iget-boolean
1	0	${OP}	0	iget-byte
1	0	${OP}	0	iget-char
1	0	${OP}	0	iget-object
1	0	${OP}	0	iget-object-quick
1	0	${OP}	0	iget-object-volatile
1	0	${OP}	0	iget-quick
1	0	${OP}	0	iget-short
1	0	${OP}	0	iget-volatile
1	0	${OP}	0	iget-wide
1	0	${OP}	0	iget-wide-quick
1	0	${OP}	0	iget-wide-volatile
1	0	${OP}	0	instance-of
1	0	${OP}	0	int-to-byte
1	0	${OP}	0	int-to-char
1	0	${OP}	0	int-to-double
1	0	${OP}	0	int-to-float
1	0	${OP}	0	int-to-long
1	0	${OP}	0	int-to-short
1	0	${OP}	0	invoke-direct
1	0	${OP}	0	invoke-direct-empty
1	0	${OP}	0	invoke-direct/range
1	0	${OP}	0	invoke-interface
1	0	${OP}	0	invoke-interface/range
1	0	${OP}	0	invoke-object-init/range
1	0	${OP}	0	invoke-static
1	0	${OP}	0	invoke-static/range
1	0	${OP}	0	invoke-super
1	0	${OP}	0	invoke-super-quick
1	0	${OP}	0	invoke-super-quick/range
1	0	${OP}	0	invoke-super/range
1	0	${OP}	0	invoke-virtual
1	0	${OP}	0	invoke-virtual-quick
1	0	${OP}	0	invoke-virtual-quick/range
1	0	${OP}	0	invoke-virtual/range
1	0	${OP}	0	iput
1	0	${OP}	0	iput-boolean
1	0	${OP}	0	iput-boolean-quick
1	0	${OP}	0	iput-byte
1	0	${OP}	0	iput-byte-quick
1	0	${OP}	0	iput-char
1	0	${OP}	0	iput-char-quick
1	0	${OP}	0	iput-object
1	0	${OP}	0	iput-object-quick
1	0	${OP}	0	iput-object-volatile
1	0	${OP}	0	iput-quick
1	0	${OP}	0	iput-short
1	0	${OP}	0	iput-short-quick
1	0	${OP}	0	iput-volatile
1	0	${OP}	0	iput-wide
1	0	${OP}	0	iput-wide-quick
1	0	${OP}	0	iput-wide-volatile
1	0	${OP}	0	long-to-double
1	0	${OP}	0	long-to-float
1	0	${OP}	0	long-to-int
1	0	${OP}	0	monitor-enter
1	0	${OP}	0	monitor-exit
1	0	${OP}	0	move
1	0	${OP}	0	move-exception
1	0	${OP}	0	move-object
1	0	${OP}	0	move-object/16
1	0	${OP}	0	move-object/from16
1	0	${OP}	0	move-result
1	0	${OP}	0	move-result-object
1	0	${OP}	0	move-result-wide
1	0	${OP}	0	move-wide
1	0	${OP}	0	move-wide/16
1	0	${OP}	0	move-wide/from16
1	0	${OP}	0	move/16
1	0	${OP}	0	move/from16
1	0	${OP}	0	mul-double
1	0	${OP}	0	mul-double/2addr
1	0	${OP}	0	mul-float
1	0	${OP}	0	mul-float/2addr
1	0	${OP}	0	mul-int
1	0	${OP}	0	mul-int/2addr
1	0	${OP}	0	mul-int/lit16
1	0	${OP}	0	mul-int/lit8
1	0	${OP}	0	mul-long
1	0	${OP}	0	mul-long/2addr
1	0	${OP}	0	neg-double
1	0	${OP}	0	neg-float
1	0	${OP}	0	neg-int
1	0	${OP}	0	neg-long
1	0	${OP}	0	new-array
1	0	${OP}	0	new-instance
1	0	${OP}	0	nop
1	0	${OP}	0	not-int
1	0	${OP}	0	not-long
1	0	${OP}	0	or-int
1	0	${OP}	0	or-int/2addr
1	0	${OP}	0	or-int/lit16
1	0	${OP}	0	or-int/lit8
1	0	${OP}	0	or-long
1	0	${OP}	0	or-long/2addr
1	0	${OP}	0	packed-switch
1	0	${OP}	0	rem-double
1	0	${OP}	0	rem-double/2addr
1	0	${OP}	0	rem-float
1	0	${OP}	0	rem-float/2addr
1	0	${OP}	0	rem-int
1	0	${OP}	0	rem-int/2addr
1	0	${OP}	0	rem-int/lit16
1	0	${OP}	0	rem-int/lit8
1	0	${OP}	0	rem-long
1	0	${OP}	0	rem-long/2addr
1	0	${OP}	0	return
1	0	${OP}	0	return-object
1	0	${OP}	0	return-void
1	0	${OP}	0	return-void-barrier
1	0	${OP}	0	return-void-no-barrier
1	0	${OP}	0	return-wide
1	0	${OP}	0	rsub-int
1	0	${OP}	0	rsub-int/lit8
1	0	${OP}	0	sget
1	0	${OP}	0	sget-boolean
1	0	${OP}	0	sget-byte
1	0	${OP}	0	sget-char
1	0	${OP}	0	sget-object
1	0	${OP}	0	sget-object-volatile
1	0	${OP}	0	sget-short
1	0	${OP}	0	sget-volatile
1	0	${OP}	0	sget-wide
1	0	${OP}	0	sget-wide-volatile
1	0	${OP}	0	shl-int
1	0	${OP}	0	shl-int/2addr
1	0	${OP}	0	shl-int/lit8
1	0	${OP}	0	shl-long
1	0	${OP}	0	shl-long/2addr
1	0	${OP}	0	shr-int
1	0	${OP}	0	shr-int/2addr
1	0	${OP}	0	shr-int/lit8
1	0	${OP}	0	shr-long
1	0	${OP}	0	shr-long/2addr
1	0	${OP}	0	sparse-switch
1	0	${OP}	0	sput
1	0	${OP}	0	sput-boolean
1	0	${OP}	0	sput-byte
1	0	${OP}	0	sput-char
1	0	${OP}	0	sput-object
1	0	${OP}	0	sput-object-volatile
1	0	${OP}	0	sput-short
1	0	${OP}	0	sput-volatile
1	0	${OP}	0	sput-wide
1	0	${OP}	0	sput-wide-volatile
1	0	${OP}	0	sub-double
1	0	${OP}	0	sub-double/2addr
1	0	${OP}	0	sub-float
1	0	${OP}	0	sub-float/2addr
1	0	${OP}	0	sub-int
1	0	${OP}	0	sub-int/2addr
1	0	${OP}	0	sub-int/lit16
1	0	${OP}	0	sub-int/lit8
1	0	${OP}	0	sub-long
1	0	${OP}	0	sub-long/2addr
1	0	${OP}	0	throw
1	0	${OP}	0	throw-verification-error
1	0	${OP}	0	ushr-int
1	0	${OP}	0	ushr-int/2addr
1	0	${OP}	0	ushr-int/lit8
1	0	${OP}	0	ushr-long
1	0	${OP}	0	ushr-long/2addr
1	0	${OP}	0	xor-int
1	0	${OP}	0	xor-int/2addr
1	0	${OP}	0	xor-int/lit16
1	0	${OP}	0	xor-int/lit8
1	0	${OP}	0	xor-long
1	0	${OP}	0	xor-long/2addr
;Constraints
1	2	0	0	A1
1	2	0	0	A2
1	2	0	0	A3
1	2	0	0	A4
1	2	0	0	A5
1	2	0	0	A6
1	2	0	0	A7
1	2	0	0	A8
1	2	0	0	A9
1	2	0	0	A10
1	2	0	0	A11
1	2	0	0	A12
1	2	0	0	A13
1	2	0	0	A14
1	2	0	0	A15
1	2	0	0	A16
1	2	0	0	A17
1	2	0	0	A18
1	2	0	0	A19
1	2	0	0	A20
1	2	0	0	A21
1	2	0	0	A22
1	2	0	0	A23
1	2	0	0	A24
1	2	0	0	A25
1	2	0	0	B1
1	2	0	0	B2
1	2	0	0	B3
1	2	0	0	B4
1	2	0	0	B5
1	2	0	0	B6
1	2	0	0	B7
1	2	0	0	B8
1	2	0	0	B9
1	2	0	0	B10
1	2	0	0	B11
1	2	0	0	B12
1	2	0	0	B13
1	2	0	0	B14
1	2	0	0	B15
1	2	0	0	B16
1	2	0	0	B17
1	2	0	0	B18
1	2	0	0	B19
1	2	0	0	B20
1	2	0	0	B21
1	2	0	0	B22
1	2	0	0	G1
1	2	0	0	G2
1	2	0	0	G3
1	2	0	0	G4
1	2	0	0	G5
1	2	0	0	G6
1	2	0	0	G7
1	2	0	0	G8
1	2	0	0	G9
1	2	0	0	G10
1	2	0	0	G11
1	2	0	0	G12
1	2	0	0	G13
1	2	0	0	G14
1	2	0	0	G15
1	2	0	0	G16
1	2	0	0	G17
1	2	0	0	G18
1	2	0	0	G19
1	2	0	0	G20
;API
1	3	${OP}	0	findPreference
1	3	${OP}	0	removePreference


;----------------------------------------------;
;                   CodeFold                   ;
;----------------------------------------------;

;Flags (sum of the members)
;       1  case sensitive.
;       2  force get fold name for function list from left at the fold start ("Folds:" section only).
;       4  force get fold name for function list from right at the fold start, including fold start ("Folds:" section only).
;       8  fold start ("Folds:" section) or skip start ("Skips:" section) located at line start.
;      16  fold start ("Folds:" section) or skip start ("Skips:" section) located at line end.
;      32  fold end ("Folds:" section) or skip end ("Skips:" section) located at line start.
;      64  fold end ("Folds:" section) or skip end ("Skips:" section) located at line end.
;     128  don't catch fold end ("Folds:" section) or skip end ("Skips:" section).
;     256  additional to 128 flag - more priority is given to sibling level instead of parent level ("Folds:" section only).
;     512  comment fold - fold ignore any other folds and skips inside ("Folds:" section only).
;    1024  reserved.
;    2048  deny fold - founded fold will be ignored ("Folds:" section only).
;    4096  xml fold - "<tag" and "</tag>", "<single" and "/>", "<single" and ">" ("Folds:" section only).
;    8192  don't check delimiters from left of fold start ("Folds:" section only).
;   16384  don't check delimiters from right of fold start ("Folds:" section only).
;   32768  don't check delimiters from left of fold end ("Folds:" section only).
;   65536  don't check delimiters from right of fold end ("Folds:" section only).
;  131072  deny delimiters ("Folds:" section only).
;  262144  don't show fold in list ("Folds:" section only).
; 1048576  regular expression in fold start ("Folds:" section) or skip start ("Skips:" section).
; 2097152  regular expression in fold end ("Folds:" section) or skip end ("Skips:" section). Backreference \101 matches \1 in fold start, \102 matches \2 and so on.


FoldPanel:
;=================================================================================================================================================================================================================================================================================================================================================================================================================================================================
;PanelFirstBkColor            PanelSecondBkColor             PanelNormalFoldColor             PanelActiveFoldColor             PanelNormalNodeOpenBkColor             PanelNormalNodeCloseBkColor             PanelActiveNodeOpenBkColor             PanelActiveNodeCloseBkColor             PanelNormalNodeOpenSignColor             PanelNormalNodeCloseSignColor             PanelActiveNodeOpenSignColor             PanelActiveNodeCloseSignColor
;=================================================================================================================================================================================================================================================================================================================================================================================================================================================================
${CodeFold_PanelFirstBkColor} ${CodeFold_PanelSecondBkColor} ${CodeFold_PanelNormalFoldColor} ${CodeFold_PanelActiveFoldColor} ${CodeFold_PanelNormalNodeOpenBkColor} ${CodeFold_PanelNormalNodeCloseBkColor} ${CodeFold_PanelActiveNodeOpenBkColor} ${CodeFold_PanelActiveNodeCloseBkColor} ${CodeFold_PanelNormalNodeOpenSignColor} ${CodeFold_PanelNormalNodeCloseSignColor} ${CodeFold_PanelActiveNodeOpenSignColor} ${CodeFold_PanelActiveNodeCloseSignColor}


FoldList:
;================================================
;ListTextColor            ListBkColor
;================================================
${CodeFold_ListTextColor} ${CodeFold_ListBkColor}


TagMark:
;============================================================================================================
;TagMarkFlags            TagMarkFontStyle             TagMarkTextColor             TagMarkBkColor
;============================================================================================================
${CodeFold_TagMarkFlags} ${CodeFold_TagMarkFontStyle} ${CodeFold_TagMarkTextColor} ${CodeFold_TagMarkBkColor}


Skips:
;=============================
;Flags  Skip    Skip    Escape
;       start   end     char
;=============================
;9=1+8
9	"#"	""	""


Folds:
;===========================================================================
;Flags  Font    Color   Color   Fold   Fold   Deli      Parent  Rule    Rule
;       style   text    bkgrnd  start  end    miters    ID      ID      file
;===========================================================================
;41=1+8+32
41	0	0	0	".method"		".end method"		" 	"	0	0
41	0	0	0	".annotation"		".end annotation"	" 	"	0	0
;41	0	0	0	".array-data"		".end array-data"	" 	"	0	0
;41	0	0	0	".field"		".end field"		" 	"	0	0
;41	0	0	0	".local"		".end local"		" 	"	0	0
41	0	0	0	".packed-switch"	".end packed-switch"	" 	"	0	0
;41	0	0	0	".param"		".end param"		" 	"	0	0
;41	0	0	0	".parameter"		".end parameter"	" 	"	0	0
41	0	0	0	".sparse-switch"	".end sparse-switch"	" 	"	0	0
;41	0	0	0	".subannotation"	".end subannotation"	" 	"	0	0
;33	0	0	0	".subannotation"	".end subannotation"	" 	"	0	0


;----------------------------------------------;
;                 AutoComplete                 ;
;----------------------------------------------;

;Flags (sum of the members)
;  1  force case sensitive.
;  2  force case insensitive.
;  4  regular expression (only for "$="). Scan starts from caret line beginning and metacharacters \a or \z specified caret position.
;  8  Don't show in listbox.


CompleteList:
;=====================================================================================================================================================================================================================================================================================================================================================================================================================================================================
;ListFontStyle                ListFontSize                 ListFaceName                 ListLineGap                 ListBlockIcon `"C:\1.dll", 0` ListBlockIconMargins "left;right"    ListHlBaseIcon `"C:\1.dll", 0` ListHlBaseIconMargins "left;right"    ListDocWordIcon `"C:\1.dll", 0` ListDocWordIconMargins "left;right"    ListBasicTextColor                 ListBasicBkColor                 ListSelTextColor                 ListSelBkColor
;=====================================================================================================================================================================================================================================================================================================================================================================================================================================================================
${AutoComplete_ListFontStyle} ${AutoComplete_ListFontSize} ${AutoComplete_ListFaceName} ${AutoComplete_ListLineGap} ${AutoComplete_ListBlockIcon} ${AutoComplete_ListBlockIconMargins} ${AutoComplete_ListHlBaseIcon} ${AutoComplete_ListHlBaseIconMargins} ${AutoComplete_ListDocWordIcon} ${AutoComplete_ListDocWordIconMargins} ${AutoComplete_ListBasicTextColor} ${AutoComplete_ListBasicBkColor} ${AutoComplete_ListSelTextColor} ${AutoComplete_ListSelBkColor}


Blocks:
;=============================================================================
;Abbreviations and blocks
;
; $~abbr         normal abbreviation.
; $(flags)~abbr  normal abbreviation with flags.
; $=abbr         exact abbreviation. May contain delimiters.
; $(flags)=abbr  exact abbreviation with flags. May contain delimiters.
; $[]            set caret to this position. Can be multiple (hot spots).
; $[text]        select text. Can be multiple (hot spots).
; $$             symbol $.
; $\]            escape symbol ]. Can be used in $[text] block: $[One [1$\] ].
; ${VAR}         variable assigned from Coder::Settings.
; $;             comment line.
;=============================================================================
