;----------------------------------------------;
;           Coder plugin syntax file           ;
;----------------------------------------------;

;Colors
; Color need to be in #RRGGBB or #RGB format.
; If color equal to zero, then color ignored.
;
;Font styles
; 0  ignored.
; 1  normal.
; 2  bold.
; 3  italic.
; 4  bold italic.
;
;For comfort file viewing/editing set tab size to 8.

;Author: Skif_off (2023-11-04)
;AkelPad 4.9.7 and higher
;https://github.com/Lenchik/Akelpad-syntax-highlighting/blob/master/ruby.coder - working version
;https://github.com/Lenchik/Akelpad-syntax-highlighting/blob/master/source_for_developers/ruby.utf8.coder - development version in UTF-8 for easier development on GitHub
;Ruby 3.2.2 ;https://ruby-doc.org/3.2.2/
;https://github.com/bbatsov/ruby-style-guide


Files:
;==========
;File types
;==========
*.rb
*.rbw


;----------------------------------------------;
;                  HighLight                   ;
;----------------------------------------------;

;Flags (sum of the members)
;     1  case sensitive.
;     2  word is a composition of characters ("Words:" section only). Example: "0123456789" - highlight words that contain only digits.
;     4  quote end required ("Quotes:" section only).
;     8  quote start string is ignored and last meet delimiter used as quote start ("Quotes:" section only).
;    16  quote end string is ignored and first meet delimiter used as quote end ("Quotes:" section only).
;    32  don't highlight quote start ("Quotes:" section only).
;    64  don't highlight quote end ("Quotes:" section only).
;   128  don't catch and don't highlight quote start ("Quotes:" section only).
;   256  don't catch and don't highlight quote end ("Quotes:" section only).
;   512  quote start, delimiter or word located at line start.
;  1024  quote end, delimiter or word located at line end.
;  2048  quote start is surrounded with delimiters ("Quotes:" section only).
;  4096  quote end is surrounded with delimiters ("Quotes:" section only).
;  8192  quote doesn't contain delimiters ("Quotes:" section only).
; 16384  only quote start string is catched ("Quotes:" section only).
; 32768  quote doesn't contain any character ("Quotes:" section only).


Font:
;=================================================================
;FontStyle             FontSize              FaceName
;=================================================================
${HighLight_FontStyle} ${HighLight_FontSize} ${HighLight_FaceName}


Colors:
;=============================================================================================================================================================================================================================================================================================================================================================================================================================
;BasicTextColor             BasicBkColor              SelTextColor              SelBkColor              LineTextColor              LineBkColor              LineBorderColor              AltTextColor              AltBkColor              AltBorderColor              ColumnColor              MarkerColor              CaretColor              UrlColor              ActiveUrlColor              VisitUrlColor
;=============================================================================================================================================================================================================================================================================================================================================================================================================================
${HighLight_BasicTextColor} ${HighLight_BasicBkColor} ${HighLight_SelTextColor} ${HighLight_SelBkColor} ${HighLight_LineTextColor} ${HighLight_LineBkColor} ${HighLight_LineBorderColor} ${HighLight_AltTextColor} ${HighLight_AltBkColor} ${HighLight_AltBorderColor} ${HighLight_ColumnColor} ${HighLight_MarkerColor} ${HighLight_CaretColor} ${HighLight_UrlColor} ${HighLight_ActiveUrlColor} ${HighLight_VisitUrlColor}


BkImage:
;==================================================
;BkImageFile              BkImageAlpha
;==================================================
${HighLight_BkImageFile}  ${HighLight_BkImageAlpha}


AutoMark:
;====================================================================================================================
;AutoMarkFlags             AutoMarkFontStyle              AutoMarkTextColor              AutoMarkBkColor
;====================================================================================================================
${HighLight_AutoMarkFlags} ${HighLight_AutoMarkFontStyle} ${HighLight_AutoMarkTextColor} ${HighLight_AutoMarkBkColor}


Quotes:
;===================================================================================
;Flags  Font    Color   Color   Quote   Quote   Escape  Quote   Quote   Parent  Rule
;       style   text    bkgrnd  start   end     char    include exclude ID      ID
;===================================================================================
;5=1+4
5	3	${STR}	0	`"`	`"`	"\"	""	""	0	0
5	3	${STR}	0	"'"	"'"	"\"	""	""	0	0
;1=1
;1	3	${COMM}	0	"#"	""	""	""	""	0	0
;RegExp (js.coder + %r{})
;16517=1+4+128+16384
;16517	0	0	0	"/"	"//"	"\"	""	"/"	0	0
;5=1+4
;5	0	${AREA}	0	"/"	"/"	"\"	""	""	0	0
;389=1+4+128+256
;389	0	${AREA}	0	"%r{"	"}"	""	""	""	0	0


QuotesRE:
;===========================================================================================
;Flags  Pattern         \BackRef=(FontStyle,ColorText,ColorBk) \BackRef=...  ParentID RuleID
;===========================================================================================
;Comment
1	"^#.*?|(?<=[ \t])#(?!\{).*?"		"\0=(3,${COMM},0)"	0	0
;Pre-defined variables
1	`\$[0-9!@&\+~=/\\,;\.<>_\*\$\?:"]`	"\0=(0,${VAR},0)"	0	0
1	"\$[`']"				"\0=(0,${VAR},0)"	0	0
1	"\$\-[0adFiIlpvw]"			"\0=(0,${VAR},0)"	0	0
1	"\$(DEBUG|LOADED_FEATURES|FILENAME|LOAD_PATH|VERBOSE|stderr|stdin|stdout)"	"\0=(0,${VAR},0)"	0	0
;Instance Variable: @[A-Za-z0-9_]++
;Class Variable:    @@[A-Za-z0-9_]++
1	"(?<=[^A-Za-z0-9_])@@[A-Za-z0-9_]+"	"\0=(0,${DEL2},0)"	0	0
1	"(?<=[^A-Za-z0-9_])@[A-Za-z0-9_]+"	"\0=(0,${DEL2},0)"	0	0
;Constants
;1	"ENV(?!\.|\[)"				"\0=(2,0,0)"		0	0
;Percent Literals
;1	"%[qQwWiIsr]"				"\0=(0,${OP},0)"	0	0


Delimiters:
;===============================================
;Flags  Font    Color   Color   Char(s)   Parent
;       style   text    bkgrnd            ID
;===============================================
1	0	0	0	" "
1	0	0	0	"	"
1	0	0	0	`"`
1	0	0	0	`'`
1	0	0	0	"`"
1	0	${DEL1}	0	+
1	0	${DEL1}	0	-
1	0	${DEL1}	0	*
1	0	${DEL1}	0	/
1	0	${DEL1}	0	%
1	0	${DEL1}	0	=
;1	0	${DEL1}	0	!
1	0	${DEL1}	0	<
1	0	${DEL1}	0	>
1	0	${DEL1}	0	&
1	0	${DEL1}	0	|
1	0	${DEL1}	0	^
1	0	${DEL1}	0	~
;1	0	${DEL1}	0	?
1	0	${DEL1}	0	(
1	0	${DEL1}	0	)
1	0	${DEL1}	0	{
1	0	${DEL1}	0	}
1	0	${DEL1}	0	[
1	0	${DEL1}	0	]
1	0	${DEL2}	0	.
1	0	${DEL2}	0	:
1	0	${DEL2}	0	,
1	0	${DEL2}	0	;
1	0	0	0	@
1	0	0	0	#
1	0	0	0	$


Words:
;===========================================
;Flags  Font    Color   Color   Word  Parent
;       style   text    bkgrnd        ID
;===========================================
1	2	${TYPE}	0	__END__
;Pseudo-Variables:
1	2	${TYPE}	0	true
1	2	${TYPE}	0	false
1	2	${TYPE}	0	nil
1	2	${VAR}	0	__FILE__
1	2	${VAR}	0	__LINE__
1	2	${VAR}	0	__ENCODING__
;Operator
1	0	${IF}	0	and
1	0	${IF}	0	or
1	0	${IF}	0	not
;Conditional statements
1	0	${IF}	0	if
1	0	${IF}	0	then
1	0	${IF}	0	elsif
1	0	${IF}	0	else
1	0	${IF}	0	end
1	0	${IF}	0	unless
1	0	${IF}	0	case
1	0	${IF}	0	when
;Loops
1	0	${IF}	0	while
1	0	${IF}	0	do
513	0	${IF}	0	begin
1	0	${IF}	0	until
1	0	${IF}	0	for
1	0	${IF}	0	in
1	0	${IF}	0	break
513	0	${IF}	0	next
1	0	${IF}	0	redo
;Method
1	0	${IF}	0	def
1	0	${IF}	0	return
1	0	${IF}	0	class
1	0	${IF}	0	alias
1	0	${IF}	0	undef
;Blocks
1	0	${IF}	0	yield
513	0	${IF}	0	BEGIN
513	0	${IF}	0	END
;Modules
1	0	${IF}	0	module
1	0	${IF}	0	require_relative
1	0	${IF}	0	require
1	0	${IF}	0	include
;Exceptions
1	0	${IF}	0	rescue
1	0	${IF}	0	retry
1	0	${IF}	0	raise
1	0	${IF}	0	fail
1	0	${IF}	0	ensure
1	0	${IF}	0	else
1	0	${IF}	0	throw
1	0	${IF}	0	catch
;Access Restriction
1	0	${IF}	0	public
1	0	${IF}	0	protected
1	0	${IF}	0	private
;
;The Kernel methods
1	0	${OP}	0	__callee__
1	0	${OP}	0	__dir__
1	0	${OP}	0	__method__
1	0	${OP}	0	abort
1	0	${OP}	0	at_exit
1	0	${OP}	0	autoload
1	0	${OP}	0	autoload?
1	0	${OP}	0	binding
1	0	${OP}	0	block_given?
1	0	${OP}	0	callcc
1	0	${OP}	0	caller
1	0	${OP}	0	caller_locations
1	0	${OP}	0	eval
1	0	${OP}	0	exec
1	0	${OP}	0	exit
1	0	${OP}	0	fork
1	0	${OP}	0	format
1	0	${OP}	0	gets
1	0	${OP}	0	global_variables
1	0	${OP}	0	lambda
1	0	${OP}	0	load
1	0	${OP}	0	local_variables
1	0	${OP}	0	loop
1	0	${OP}	0	open
1	0	${OP}	0	p
1	0	${OP}	0	print
1	0	${OP}	0	printf
1	0	${OP}	0	proc
1	0	${OP}	0	putc
1	0	${OP}	0	puts
1	0	${OP}	0	rand
1	0	${OP}	0	readline
1	0	${OP}	0	readlines
1	0	${OP}	0	select
1	0	${OP}	0	set_trace_func
1	0	${OP}	0	sleep
1	0	${OP}	0	spawn
1	0	${OP}	0	sprintf
1	0	${OP}	0	srand
1	0	${OP}	0	syscall
1	0	${OP}	0	system
1	0	${OP}	0	test
1	0	${OP}	0	trace_var
1	0	${OP}	0	trap
1	0	${OP}	0	untrace_var
1	0	${OP}	0	warn
;Constants
;1	2	0	0	ARGV


;----------------------------------------------;
;                   CodeFold                   ;
;----------------------------------------------;

;Flags (sum of the members)
;       1  case sensitive.
;       2  force get fold name for function list from left at the fold start ("Folds:" section only).
;       4  force get fold name for function list from right at the fold start, including fold start ("Folds:" section only).
;       8  fold start ("Folds:" section) or skip start ("Skips:" section) located at line start.
;      16  fold start ("Folds:" section) or skip start ("Skips:" section) located at line end.
;      32  fold end ("Folds:" section) or skip end ("Skips:" section) located at line start.
;      64  fold end ("Folds:" section) or skip end ("Skips:" section) located at line end.
;     128  don't catch fold end ("Folds:" section) or skip end ("Skips:" section).
;     256  additional to 128 flag - more priority is given to sibling level instead of parent level ("Folds:" section only).
;     512  comment fold - fold ignore any other folds and skips inside ("Folds:" section only).
;    1024  reserved.
;    2048  deny fold - founded fold will be ignored ("Folds:" section only).
;    4096  xml fold - "<tag" and "</tag>", "<single" and "/>", "<single" and ">" ("Folds:" section only).
;    8192  don't check delimiters from left of fold start ("Folds:" section only).
;   16384  don't check delimiters from right of fold start ("Folds:" section only).
;   32768  don't check delimiters from left of fold end ("Folds:" section only).
;   65536  don't check delimiters from right of fold end ("Folds:" section only).
;  131072  deny delimiters ("Folds:" section only).
;  262144  don't show fold in list ("Folds:" section only).
; 1048576  regular expression in fold start ("Folds:" section) or skip start ("Skips:" section).
; 2097152  regular expression in fold end ("Folds:" section) or skip end ("Skips:" section). Backreference \101 matches \1 in fold start, \102 matches \2 and so on.


FoldPanel:
;=================================================================================================================================================================================================================================================================================================================================================================================================================================================================
;PanelFirstBkColor            PanelSecondBkColor             PanelNormalFoldColor             PanelActiveFoldColor             PanelNormalNodeOpenBkColor             PanelNormalNodeCloseBkColor             PanelActiveNodeOpenBkColor             PanelActiveNodeCloseBkColor             PanelNormalNodeOpenSignColor             PanelNormalNodeCloseSignColor             PanelActiveNodeOpenSignColor             PanelActiveNodeCloseSignColor
;=================================================================================================================================================================================================================================================================================================================================================================================================================================================================
${CodeFold_PanelFirstBkColor} ${CodeFold_PanelSecondBkColor} ${CodeFold_PanelNormalFoldColor} ${CodeFold_PanelActiveFoldColor} ${CodeFold_PanelNormalNodeOpenBkColor} ${CodeFold_PanelNormalNodeCloseBkColor} ${CodeFold_PanelActiveNodeOpenBkColor} ${CodeFold_PanelActiveNodeCloseBkColor} ${CodeFold_PanelNormalNodeOpenSignColor} ${CodeFold_PanelNormalNodeCloseSignColor} ${CodeFold_PanelActiveNodeOpenSignColor} ${CodeFold_PanelActiveNodeCloseSignColor}


FoldList:
;================================================
;ListTextColor            ListBkColor
;================================================
${CodeFold_ListTextColor} ${CodeFold_ListBkColor}


TagMark:
;============================================================================================================
;TagMarkFlags            TagMarkFontStyle             TagMarkTextColor             TagMarkBkColor
;============================================================================================================
${CodeFold_TagMarkFlags} ${CodeFold_TagMarkFontStyle} ${CodeFold_TagMarkTextColor} ${CodeFold_TagMarkBkColor}


Skips:
;=============================
;Flags  Skip    Skip    Escape
;       start   end     char
;=============================
1	`"`	`"`	"\"
1	`'`	`'`	"\"


Folds:
;===========================================================================
;Flags  Font    Color   Color   Fold   Fold   Deli      Parent  Rule    Rule
;       style   text    bkgrnd  start  end    miters    ID      ID      file
;===========================================================================
;Sha-bang
;3146313=1+8+64+512+1048576+2097152
3146313	2	${COMM}	0	"\A#!"		"$"	" 	"	0	0
;3146249=1+8+512+1048576+2097152
3146249	3	0	0	"^__END__$"	".\Z"	" 	"	0	0
;Block comment
;553=1+8+32+512
553	3	${COMM}	0	"=begin"	"=end"	" 	"	0	0
;
;1	0	0	0	"{"		"}"	" 	"	0	0
;Method definition
;41=1+8+32
41	0	0	0	"def"		"end"	" 	"	0	0
;425=1+8+32+128+256
425	0	0	0	"def"		"end"	" 	"	0	0
;Module definition
425	0	0	0	"module"	"end"	" 	"	0	0
;Exceptions
425	0	0	0	"begin"		"end"	" 	"	0	0
;41=1+8+32
41	0	0	0	"for"		"end"	" 	"	0	0
;if...elsif...else...end
;41=1+8+32
41	0	0	0	"if"		"end"	" 	"	0	0
;425=1+8+32+128+256
425	0	0	0	"if"		"elsif"	" 	"	0	0
;425=1+8+32+128+256
425	0	0	0	"if"		"else"	" 	"	0	0
;41=1+8+32
41	0	0	0	"elsif"		"end"	" 	"	0	0
;425=1+8+32+128+256
425	0	0	0	"elsif"		"elsif"	" 	"	0	0
;425=1+8+32+128+256
425	0	0	0	"elsif"		"else"	" 	"	0	0
;41=1+8+32
41	0	0	0	"else"		"end"	" 	"	0	0
;77=1+8+64
;425=1+8+32+128+256
73	0	0	0	"BEGIN {"	"}"	" 	"	0	0
425	0	0	0	"BEGIN {"	"}"	" 	"	0	0
73	0	0	0	"END {"		"}"	" 	"	0	0
425	0	0	0	"END {"		"}"	" 	"	0	0
;Here Documents
;3048425=1+8+32+512+262144+1048576+2097152
;3048425	3	${STR}	0	"(<<)(["'`]?[A-Z_]+["'`]?)"	"^ ?\102$"	""	0	0
;3048425	3	${STR}	0	"(<<\-)(["'`]?[A-Z_]+["'`]?)"	"^ ?\102$"	""	0	0
;3048425	3	${STR}	0	"(<<~)(["'`]?[A-Z_]+["'`]?)"	"^ ?\102$"	""	0	0


;----------------------------------------------;
;                 AutoComplete                 ;
;----------------------------------------------;

;Flags (sum of the members)
;  1  force case sensitive.
;  2  force case insensitive.
;  4  regular expression (only for "$="). Scan starts from caret line beginning and metacharacters \a or \z specified caret position.
;  8  Don't show in listbox.


CompleteList:
;=====================================================================================================================================================================================================================================================================================================================================================================================================================================================================
;ListFontStyle                ListFontSize                 ListFaceName                 ListLineGap                 ListBlockIcon `"C:\1.dll", 0` ListBlockIconMargins "left;right"    ListHlBaseIcon `"C:\1.dll", 0` ListHlBaseIconMargins "left;right"    ListDocWordIcon `"C:\1.dll", 0` ListDocWordIconMargins "left;right"    ListBasicTextColor                 ListBasicBkColor                 ListSelTextColor                 ListSelBkColor
;=====================================================================================================================================================================================================================================================================================================================================================================================================================================================================
${AutoComplete_ListFontStyle} ${AutoComplete_ListFontSize} ${AutoComplete_ListFaceName} ${AutoComplete_ListLineGap} ${AutoComplete_ListBlockIcon} ${AutoComplete_ListBlockIconMargins} ${AutoComplete_ListHlBaseIcon} ${AutoComplete_ListHlBaseIconMargins} ${AutoComplete_ListDocWordIcon} ${AutoComplete_ListDocWordIconMargins} ${AutoComplete_ListBasicTextColor} ${AutoComplete_ListBasicBkColor} ${AutoComplete_ListSelTextColor} ${AutoComplete_ListSelBkColor}


Blocks:
;=============================================================================
;Abbreviations and blocks
;
; $~abbr         normal abbreviation.
; $(flags)~abbr  normal abbreviation with flags.
; $=abbr         exact abbreviation. May contain delimiters.
; $(flags)=abbr  exact abbreviation with flags. May contain delimiters.
; $[]            set caret to this position. Can be multiple (hot spots).
; $[text]        select text. Can be multiple (hot spots).
; $$             symbol $.
; $\]            escape symbol ]. Can be used in $[text] block: $[One [1$\] ].
; ${VAR}         variable assigned from Coder::Settings.
; $;             comment line.
;=============================================================================
$~module
module $[module_name]
${AutoComplete_Indent}$[some_code]
end

$~class
class $[class_name]
${AutoComplete_Indent}$[some_code]
end

$~def
def $[method_name]
${AutoComplete_Indent}$[some_code]
end

$~def...with...param
def $[method_name]($[var])
${AutoComplete_Indent}$[some_code]
end

$~def...with...default...param
def $[method_name]($[var] = $[val])
${AutoComplete_Indent}$[some_code]
end

$~case
case $[]
when $[]
${AutoComplete_Indent}$[some_code]
when $[]
${AutoComplete_Indent}$[some_code]
end

$~for
for $[] in $[]
${AutoComplete_Indent}$[some_code]
end

$~if...else
if $[]
${AutoComplete_Indent}$[some_code]
else
${AutoComplete_Indent}$[some_code]
end

$~while
while $[]
${AutoComplete_Indent}$[some_code]
end

$~until
until $[]
${AutoComplete_Indent}$[some_code]
end

$~loop
loop do
${AutoComplete_Indent}$[some_code]
end

$~begin...rescue
begin
${AutoComplete_Indent}$[some_code]
rescue
${AutoComplete_Indent}$[some_code]
end

$~begin...rescue...ensure
begin
${AutoComplete_Indent}$[some_code]
rescue
${AutoComplete_Indent}$[some_code]
ensure
${AutoComplete_Indent}$[some_code]
end
