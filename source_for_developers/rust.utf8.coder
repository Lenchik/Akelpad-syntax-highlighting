;----------------------------------------------;
;           Coder plugin syntax file           ;
;----------------------------------------------;

;Colors
; Color need to be in #RRGGBB or #RGB format.
; If color equal to zero, then color ignored.
;
;Font styles
; 0  ignored.
; 1  normal.
; 2  bold.
; 3  italic.
; 4  bold italic.
;
;For comfort file viewing/editing set tab size to 8.

;Author: Skif_off (2022-03-25)
;AkelPad 4.9.6 and higher
;https://github.com/Lenchik/Akelpad-syntax-highlighting/blob/master/rust.coder - working version
;https://github.com/Lenchik/Akelpad-syntax-highlighting/blob/master/source_for_developers/rust.utf8.coder - development version in UTF-8 for easier development on GitHub
;https://doc.rust-lang.org/stable/reference/
;https://doc.rust-lang.org/stable/rust-by-example/index.html
;https://doc.rust-lang.org/std/index.html


Files:
;==========
;File types
;==========
*.rs


;----------------------------------------------;
;                  HighLight                   ;
;----------------------------------------------;

;Flags (sum of the members)
;     1  case sensitive.
;     2  word is a composition of characters ("Words:" section only). Example: "0123456789" - highlight words that contain only digits.
;     4  quote end required ("Quotes:" section only).
;     8  quote start string is ignored and last meet delimiter used as quote start ("Quotes:" section only).
;    16  quote end string is ignored and first meet delimiter used as quote end ("Quotes:" section only).
;    32  don't highlight quote start ("Quotes:" section only).
;    64  don't highlight quote end ("Quotes:" section only).
;   128  don't catch and don't highlight quote start ("Quotes:" section only).
;   256  don't catch and don't highlight quote end ("Quotes:" section only).
;   512  quote start, delimiter or word located at line start.
;  1024  quote end, delimiter or word located at line end.
;  2048  quote start is surrounded with delimiters ("Quotes:" section only).
;  4096  quote end is surrounded with delimiters ("Quotes:" section only).
;  8192  quote doesn't contain delimiters ("Quotes:" section only).
; 16384  only quote start string is catched ("Quotes:" section only).
; 32768  quote doesn't contain any character ("Quotes:" section only).


Font:
;=================================================================
;FontStyle             FontSize              FaceName
;=================================================================
${HighLight_FontStyle} ${HighLight_FontSize} ${HighLight_FaceName}


Colors:
;=============================================================================================================================================================================================================================================================================================================================================================================================================================
;BasicTextColor             BasicBkColor              SelTextColor              SelBkColor              LineTextColor              LineBkColor              LineBorderColor              AltTextColor              AltBkColor              AltBorderColor              ColumnColor              MarkerColor              CaretColor              UrlColor              ActiveUrlColor              VisitUrlColor
;=============================================================================================================================================================================================================================================================================================================================================================================================================================
${HighLight_BasicTextColor} ${HighLight_BasicBkColor} ${HighLight_SelTextColor} ${HighLight_SelBkColor} ${HighLight_LineTextColor} ${HighLight_LineBkColor} ${HighLight_LineBorderColor} ${HighLight_AltTextColor} ${HighLight_AltBkColor} ${HighLight_AltBorderColor} ${HighLight_ColumnColor} ${HighLight_MarkerColor} ${HighLight_CaretColor} ${HighLight_UrlColor} ${HighLight_ActiveUrlColor} ${HighLight_VisitUrlColor}


BkImage:
;==================================================
;BkImageFile              BkImageAlpha
;==================================================
${HighLight_BkImageFile}  ${HighLight_BkImageAlpha}


AutoMark:
;====================================================================================================================
;AutoMarkFlags             AutoMarkFontStyle              AutoMarkTextColor              AutoMarkBkColor
;====================================================================================================================
${HighLight_AutoMarkFlags} ${HighLight_AutoMarkFontStyle} ${HighLight_AutoMarkTextColor} ${HighLight_AutoMarkBkColor}


Quotes:
;===================================================================================
;Flags  Font    Color   Color   Quote   Quote   Escape  Quote   Quote   Parent  Rule
;       style   text    bkgrnd  start   end     char    include exclude ID      ID
;===================================================================================
;5=1+4
5	3	${STR}	0	`"`	`"`	"\"	""	""	0	0
5	3	${STR}	0	"'"	"'"	"\"	""	""	0	0
;1=1
1	3	${COMM}	0	"//"	""	""	""	""	0	0
;5=1+4
5	3	${COMM}	0	"/*"	"*/"	""	""	""	0	0
;Procedural macros, attributes
;517=1+4+512
517	0	${VAR}	0	"#["	"]"	""	""	""	0	0
517	0	${VAR}	0	"#!["	"]"	""	""	""	0	0


QuotesRE:
;===========================================================================================
;Flags  Pattern         \BackRef=(FontStyle,ColorText,ColorBk) \BackRef=...  ParentID RuleID
;===========================================================================================
;Metavariables: fragment-specifier
;\$[^\r\n:]+:(block|expr|ident|item|lifetime|literal|meta|pat_param|path|pat|stmt|tt|ty|vis)(?>[^a-z])


Delimiters:
;===============================================
;Flags  Font    Color   Color   Char(s)   Parent
;       style   text    bkgrnd            ID
;===============================================
1	0	0	0	" "
1	0	0	0	"	"
1	0	${DEL1}	0	(
1	0	${DEL1}	0	)
1	0	${DEL1}	0	{
1	0	${DEL1}	0	}
1	0	${DEL1}	0	[
1	0	${DEL1}	0	]
;1	0	${DEL1}	0	'
1	0	${DEL2}	0	!
1	0	${DEL2}	0	%
1	0	${DEL2}	0	&
1	0	${DEL2}	0	*
1	0	${DEL2}	0	+
1	0	${DEL2}	0	,
1	0	${DEL2}	0	-
1	0	${DEL2}	0	.
1	0	${DEL2}	0	/
1	0	${DEL2}	0	:
1	0	${DEL2}	0	;
1	0	${DEL2}	0	<
1	0	${DEL2}	0	=
1	0	${DEL2}	0	>
1	0	${DEL2}	0	?
1	0	${DEL2}	0	\
1	0	${DEL2}	0	^
1	0	${DEL2}	0	|


Words:
;===========================================
;Flags  Font    Color   Color   Word  Parent
;       style   text    bkgrnd        ID
;===========================================
;Keywords
1	0	${IF}	0	as
1	0	${IF}	0	async
1	0	${IF}	0	await
1	0	${IF}	0	break
1	0	${IF}	0	const
1	0	${IF}	0	continue
1	0	${IF}	0	crate
1	0	${IF}	0	dyn
1	0	${IF}	0	else
1	0	${IF}	0	enum
1	0	${IF}	0	extern
1	0	${IF}	0	fn
1	0	${IF}	0	for
1	0	${IF}	0	if
1	0	${IF}	0	impl
1	0	${IF}	0	in
1	0	${IF}	0	let
1	0	${IF}	0	loop
1	0	${IF}	0	match
1	0	${IF}	0	mod
1	0	${IF}	0	move
1	0	${IF}	0	mut
1	0	${IF}	0	pub
1	0	${IF}	0	ref
1	0	${IF}	0	return
1	0	${IF}	0	self
1	0	${IF}	0	static
1	0	${IF}	0	struct
1	0	${IF}	0	super
1	0	${IF}	0	trait
1	0	${IF}	0	type
1	0	${IF}	0	union
1	0	${IF}	0	unsafe
1	0	${IF}	0	use
1	0	${IF}	0	where
1	0	${IF}	0	while
;Other
1	0	${IF}	0	false
1	0	${IF}	0	true
;Macros
1	0	${OP}	0	assert
1	0	${OP}	0	assert_eq
1	0	${OP}	0	assert_ne
1	0	${OP}	0	cfg
1	0	${OP}	0	column
1	0	${OP}	0	compile_error
1	0	${OP}	0	concat
1	0	${OP}	0	dbg
1	0	${OP}	0	debug_assert
1	0	${OP}	0	debug_assert_eq
1	0	${OP}	0	debug_assert_ne
1	0	${OP}	0	env
1	0	${OP}	0	eprint
1	0	${OP}	0	eprintln
1	0	${OP}	0	file
1	0	${OP}	0	format
1	0	${OP}	0	format_args
1	0	${OP}	0	include
1	0	${OP}	0	include_bytes
1	0	${OP}	0	include_str
1	0	${OP}	0	is_x86_feature_detected
1	0	${OP}	0	line
1	0	${OP}	0	matches
1	0	${OP}	0	macro_rules
1	0	${OP}	0	module_path
1	0	${OP}	0	option_env
1	0	${OP}	0	panic
1	0	${OP}	0	print
1	0	${OP}	0	println
1	0	${OP}	0	stringify
1	0	${OP}	0	thread_local
1	0	${OP}	0	todo
1	0	${OP}	0	try
1	0	${OP}	0	unimplemented
1	0	${OP}	0	unreachable
1	0	${OP}	0	vec
1	0	${OP}	0	write
1	0	${OP}	0	writeln
;Types
1	0	${TYPE}	0	bool
1	0	${TYPE}	0	char
1	0	${TYPE}	0	f32
1	0	${TYPE}	0	f64
1	0	${TYPE}	0	i8
1	0	${TYPE}	0	i16
1	0	${TYPE}	0	i32
1	0	${TYPE}	0	i64
1	0	${TYPE}	0	i128
1	0	${TYPE}	0	isize
1	0	${TYPE}	0	u8
1	0	${TYPE}	0	u16
1	0	${TYPE}	0	u32
1	0	${TYPE}	0	u64
1	0	${TYPE}	0	u128
1	0	${TYPE}	0	usize


;----------------------------------------------;
;                   CodeFold                   ;
;----------------------------------------------;

;Flags (sum of the members)
;       1  case sensitive.
;       2  force get fold name for function list from left at the fold start ("Folds:" section only).
;       4  force get fold name for function list from right at the fold start, including fold start ("Folds:" section only).
;       8  fold start ("Folds:" section) or skip start ("Skips:" section) located at line start.
;      16  fold start ("Folds:" section) or skip start ("Skips:" section) located at line end.
;      32  fold end ("Folds:" section) or skip end ("Skips:" section) located at line start.
;      64  fold end ("Folds:" section) or skip end ("Skips:" section) located at line end.
;     128  don't catch fold end ("Folds:" section) or skip end ("Skips:" section).
;     256  additional to 128 flag - more priority is given to sibling level instead of parent level ("Folds:" section only).
;     512  comment fold - fold ignore any other folds and skips inside ("Folds:" section only).
;    1024  reserved.
;    2048  deny fold - founded fold will be ignored ("Folds:" section only).
;    4096  xml fold - "<tag" and "</tag>", "<single" and "/>", "<single" and ">" ("Folds:" section only).
;    8192  don't check delimiters from left of fold start ("Folds:" section only).
;   16384  don't check delimiters from right of fold start ("Folds:" section only).
;   32768  don't check delimiters from left of fold end ("Folds:" section only).
;   65536  don't check delimiters from right of fold end ("Folds:" section only).
;  131072  deny delimiters ("Folds:" section only).
;  262144  don't show fold in list ("Folds:" section only).
; 1048576  regular expression in fold start ("Folds:" section) or skip start ("Skips:" section).
; 2097152  regular expression in fold end ("Folds:" section) or skip end ("Skips:" section).


FoldPanel:
;=================================================================================================================================================================================================================================================================================================================================================================================================================================================================
;PanelFirstBkColor            PanelSecondBkColor             PanelNormalFoldColor             PanelActiveFoldColor             PanelNormalNodeOpenBkColor             PanelNormalNodeCloseBkColor             PanelActiveNodeOpenBkColor             PanelActiveNodeCloseBkColor             PanelNormalNodeOpenSignColor             PanelNormalNodeCloseSignColor             PanelActiveNodeOpenSignColor             PanelActiveNodeCloseSignColor
;=================================================================================================================================================================================================================================================================================================================================================================================================================================================================
${CodeFold_PanelFirstBkColor} ${CodeFold_PanelSecondBkColor} ${CodeFold_PanelNormalFoldColor} ${CodeFold_PanelActiveFoldColor} ${CodeFold_PanelNormalNodeOpenBkColor} ${CodeFold_PanelNormalNodeCloseBkColor} ${CodeFold_PanelActiveNodeOpenBkColor} ${CodeFold_PanelActiveNodeCloseBkColor} ${CodeFold_PanelNormalNodeOpenSignColor} ${CodeFold_PanelNormalNodeCloseSignColor} ${CodeFold_PanelActiveNodeOpenSignColor} ${CodeFold_PanelActiveNodeCloseSignColor}


FoldList:
;================================================
;ListTextColor            ListBkColor
;================================================
${CodeFold_ListTextColor} ${CodeFold_ListBkColor}


TagMark:
;============================================================================================================
;TagMarkFlags            TagMarkFontStyle             TagMarkTextColor             TagMarkBkColor
;============================================================================================================
${CodeFold_TagMarkFlags} ${CodeFold_TagMarkFontStyle} ${CodeFold_TagMarkTextColor} ${CodeFold_TagMarkBkColor}


Skips:
;=============================
;Flags  Skip    Skip    Escape
;       start   end     char
;=============================
1	`"`	`"`	"\"
1	"'"	"'"	"\"
1	"//"	""	""


Folds:
;===========================================================================
;Flags  Font    Color   Color   Fold   Fold   Deli      Parent  Rule    Rule
;       style   text    bkgrnd  start  end    miters    ID      ID      file
;===========================================================================
1	0	0	0	"{"		"}"	""		0	0
;513=1+512
513	3	${COMM}	0	"/*"		"*/"	""		0	0
;98441=1+8+128+32768+65536
;98441	0	0	0	"unsafe"	"}"	" 	"	0	0


;----------------------------------------------;
;                 AutoComplete                 ;
;----------------------------------------------;

;Flags (sum of the members)
;  1  force case sensitive.
;  2  force case insensitive.
;  4  regular expression (only for "$="). Scan starts from caret line beginning and metacharacters \a or \z specified caret position.
;  8  Don't show in listbox.


CompleteList:
;=====================================================================================================================================================================================================================================================================================================================================================================================================================================================================
;ListFontStyle                ListFontSize                 ListFaceName                 ListLineGap                 ListBlockIcon `"C:\1.dll", 0` ListBlockIconMargins "left;right"    ListHlBaseIcon `"C:\1.dll", 0` ListHlBaseIconMargins "left;right"    ListDocWordIcon `"C:\1.dll", 0` ListDocWordIconMargins "left;right"    ListBasicTextColor                 ListBasicBkColor                 ListSelTextColor                 ListSelBkColor
;=====================================================================================================================================================================================================================================================================================================================================================================================================================================================================
${AutoComplete_ListFontStyle} ${AutoComplete_ListFontSize} ${AutoComplete_ListFaceName} ${AutoComplete_ListLineGap} ${AutoComplete_ListBlockIcon} ${AutoComplete_ListBlockIconMargins} ${AutoComplete_ListHlBaseIcon} ${AutoComplete_ListHlBaseIconMargins} ${AutoComplete_ListDocWordIcon} ${AutoComplete_ListDocWordIconMargins} ${AutoComplete_ListBasicTextColor} ${AutoComplete_ListBasicBkColor} ${AutoComplete_ListSelTextColor} ${AutoComplete_ListSelBkColor}


Blocks:
;=============================================================================
;Abbreviations and blocks
;
; $~abbr         normal abbreviation.
; $(flags)~abbr  normal abbreviation with flags.
; $=abbr         exact abbreviation. May contain delimiters.
; $(flags)=abbr  exact abbreviation with flags. May contain delimiters.
; $[]            set caret to this position. Can be multiple (hot spots).
; $[text]        select text. Can be multiple (hot spots).
; $$             symbol $.
; $\]            escape symbol ]. Can be used in $[text] block: $[One [1$\] ].
; ${VAR}         variable assigned from Coder::Settings.
; $;             comment line.
;=============================================================================
$~enum
enum $[] {
${AutoComplete_Indent}$[],
${AutoComplete_Indent}$[],
${AutoComplete_Indent}$[],
}

$~extern
extern {
${AutoComplete_Indent}$[];
}

$~extern...abi
extern "$[]" {
${AutoComplete_Indent}$[];
}

$~fn
fn $[] {
${AutoComplete_Indent}$[];
}

$~for
for $[] in $[] {
${AutoComplete_Indent}$[];
}

$~if
if $[] {
${AutoComplete_Indent}$[];
}

$~if...else
if $[] {
${AutoComplete_Indent}$[];
} else {
${AutoComplete_Indent}$[];
}

$~if...else...if
if $[] {
${AutoComplete_Indent}$[];
} else if $[] {
${AutoComplete_Indent}$[];
} else {
${AutoComplete_Indent}$[];
}

$~if...let
if let $[] {
${AutoComplete_Indent}$[];
}

$~impl
impl $[] {
${AutoComplete_Indent}$[];
}

$~loop
loop {
${AutoComplete_Indent}$[];
}

$~macro_rules
macro_rules! $[] {
${AutoComplete_Indent}$[];
}

$~match
match $[] {
${AutoComplete_Indent}$[],
${AutoComplete_Indent}$[],
${AutoComplete_Indent}$[],
}

$~mod
mod $[] {
${AutoComplete_Indent}$[];
}

$~struct
struct $[] {
${AutoComplete_Indent}$[],
${AutoComplete_Indent}$[],
${AutoComplete_Indent}$[],
}

$~trait
trait $[] {
${AutoComplete_Indent}$[];
${AutoComplete_Indent}$[];
}

$~type
type $[] = $[];

$~union
union $[] {
${AutoComplete_Indent}$[],
${AutoComplete_Indent}$[],
${AutoComplete_Indent}$[],
}

$~unsafe
unsafe {
${AutoComplete_Indent}$[];
}

$~while
while $[] {
${AutoComplete_Indent}$[];
}

$~while let
while let $[] = $[] {
${AutoComplete_Indent}$[];
}
